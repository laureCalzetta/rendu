var express = require('express');
var router = express.Router();
const User = require('../models/user');
const Issue = require('../models/issue');


/**
 * @api {get} /api/users List users
 * @apiName RetrieveUsers
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves a paginated list of users.
 */

router.get('/', function(req, res, next) {
  User.find().sort('name').exec(function(err, users) {
    if (err) {
      return next(err);
    }
    res.send(users);
  });
});

/**
 * @api {get} /api/users/:id Retrieve a users
 * @apiName RetrieveUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Retrieves one user.
 *
 * @apiUse UserIdInUrlPath
 * @apiUse UserInResponseBody
 * @apiUse UserNotFoundError
 *
 * @apiExample Example
 *     GET /api/users/58b2926f5e1def0123e97bc0 HTTP/1.1
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "firstname": "John",
 *       "lastname": "Doe",
 *       "createdAte": "2017-29-02T08:30:00.000Z",
 *       "role": "citizen"
 *     }
 */
router.get('/:user_id', function(req, res, next) {
  User.findById(req.params.user_id, function(err, user) {
      const user_Id = req.params.user_id;
      if (err) {
        return userNotFound(res, user_Id);
      }
      res.send(user);
    });
});


/**
 * @api {post} /api/users Create a user
 * @apiName CreateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Registers a new user.
 *
 * @apiUse UserInRequestBody
 * @apiUse UserInResponseBody
 * @apiUse UserValidationError
 * @apiSuccess (Response body) {String} id A unique identifier for the user generated by the server
 *
 * @apiExample Example
 *     POST /api/users HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "firstname": "John",
 *       "lastname": "Doe",
 *       "createdAte": "2017-29-02T08:30:00.000Z",
 *       "role": "citizen"
 *     }
 *
 * @apiSuccessExample 201 Created
 *     HTTP/1.1 201 Created
 *     Content-Type: application/json
 *     Location: https://heigvd-webserv-2017-team-2.herokuapp.com/api/users/58b2926f5e1def0123e97bc0
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "firstname": "John",
 *       "lastname": "Doe",
 *       "createdAte": "2017-29-02T08:30:00.000Z",
 *       "role": "citizen"
 *     }
 */
router.post('/', function(req, res, next) {
  // Create a new document from the JSON in the request body
  var newUser = new User(req.body);
  // Save that document
  newUser.save(function(err, savedUser) {
    if (err) {
      if (err.name == 'ValidationError') {
        res.status(422).send("l'erreur suivante est survenue : " + err);
        return;
      } else {
        res.status(500).send("l'erreur suivante est survenue : " + err);
        return;
      }
    }
      // Send the saved document in the response
    res.send(savedUser);
  });

});


/**
 * @api {put} /api/users/:id Update a user
 * @apiName UpdateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Replaces all the user's data (the request body must represent a full, valid user).
 *
 * @apiUse UserIdInUrlPath
 * @apiUse UserInRequestBody
 * @apiUse UserInResponseBody
 * @apiUse UserNotFoundError
 * @apiUse UserValidationError
 *
 * @apiExample Example
 *     PUT /api/users/58b2926f5e1def0123e97bc0 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "firstname": "Jenny",
 *       "lastname": "Doe",
 *       "role": "citizen"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "firstname": "Jenny",
 *       "lastname": "Doe",
 *       "createdAte": "2017-29-02T08:30:00.000Z",
 *       "role": "citizen"
 *     }
 */
router.put('/:user_id', function(req, res, next) {
   User.findById(req.params.user_id, function(err, user) {
    const user_id = req.params.user_id;
    if (err) {
        return userNotFound(res, user_id);
    }
  user.firstname = req.body.firstname;
  user.lastname = req.body.lastname;
  user.role = req.body.role;

  user.save(function(err) {
      if (err) {
          if (err.name == 'ValidationError') {
            res.status(422).send("l'erreur suivante est survenue : " + err);
            return;
        } else {
            res.status(500).send("l'erreur suivante est survenue : " + err);
            return;
          }
      }
        res.send(user);
    });
  });
});


/**
 * @api {patch} /api/users/:id Partially update a user
 * @apiName PartiallyUpdateUser
 * @apiGroup User
 * @apiVersion 1.0.0
 * @apiDescription Partially updates a user's data (only the properties found in the request body will be updated).
 * All properties are optional.
 *
 * @apiUse UserIdInUrlPath
 * @apiUse UserInRequestBody
 * @apiUse UserInResponseBody
 * @apiUse UserNotFoundError
 * @apiUse UserValidationError
 *
 * @apiExample Example
 *     PATCH /api/users/58b2926f5e1def0123e97bc0 HTTP/1.1
 *     Content-Type: application/json
 *
 *     {
 *       "firstname": "Jenny",
 *       "lastname": "Doe",
 *       "role": "citizen"
 *     }
 *
 * @apiSuccessExample 200 OK
 *     HTTP/1.1 200 OK
 *     Content-Type: application/json
 *
 *     {
 *       "id": "58b2926f5e1def0123e97bc0",
 *       "firstname": "Jenny",
 *       "lastname": "Doe",
 *       "createdAte": "2017-29-02T08:30:00.000Z",
 *       "role": "citizen"
 *     }
 */
router.patch('/:user_id', function(req, res, next) {
   User.findById(req.params.user_id, function(err, user) {
    const user_id = req.params.user_id;
    if (err) {
        return userNotFound(res, user_id);
    }

    if (req.body.firstname !== undefined) {
      user.firstname = req.body.firstname;
    }
    if (req.body.lastname !== undefined) {
      user.lastname = req.body.lastname;
    }
    if (req.body.role !== undefined) {
      user.role = req.body.role;
    }
    user.save(function(err) {
      if (err) {
          if (err.name == 'ValidationError') {
            res.status(422).send("l'erreur suivante est survenue : " + err);
            return;
        } else {
            res.status(500).send("l'erreur suivante est survenue : " + err);
            return;
          }
      }
        res.send(user);
    });
  });
});


/**
 * Responds with 404 Not Found and a message indicating that the user with the specified ID was not found.
 */
function userNotFound(res, userId) {
  return res.status(404).type('text').send(`No user found with ID ${userId}`);
}

/**
 * @apiDefine UserIdInUrlPath
 * @apiParam (URL path parameters) {String} id The unique identifier of the user to retrieve
 */

/**
 * @apiDefine IssueInRequestBody
 * @apiParam (Request body) {String{2..20}} firstname the user's firstname (2-20 characters)
 * @apiParam (Request body) {String{2..20}} lastname the user's lastname (2-20 characters)
 * @apiParam (Request body) {String="citizen","manager"} role The user's role (citizen or manager)
 */

/**
 * @apiDefine IssueInResponseBody
 * @apiSuccess (Response body) {String} id The unique identifier of the user
 * @apiSuccess (Response body) {String} firstname The user's firstname
 * @apiSuccess (Response body) {String} lastname The user's lastname
 * @apiSuccess (Response body) {String} role The user's role
 * @apiSuccess (Response body) {String} createdAt the date at which the user was reported
 */

/**
 * @apiDefine UserNotFoundError
 *
 * @apiError {Object} 404/NotFound No user was found corresponding to the ID in the URL path
 *
 * @apiErrorExample {json} 404 Not Found
 *     HTTP/1.1 404 Not Found
 *     Content-Type: text/plain
 *
 *     No user found with ID 58b2926f5e1def0123e97bc0
 */

 /**
 * @apiDefine UserValidationError
 *
 * @apiError {Object} 422/UnprocessableEntity Some of the user's properties are invalid
 *
 * @apiErrorExample {json} 422 Unprocessable Entity
 *     HTTP/1.1 422 Unprocessable Entity
 *     Content-Type: application/json
 *
 *     l'erreur suivante est survenue : ValidationError: Path `role` is required.
 */


module.exports = router;